{"version":3,"sources":["services/auth.service/auth.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAQa,WAAW,GAAxB;gBAII;oBAFQ,SAAI,GAAC,IAAI,SAAS,CAAC,sBAAQ,CAAC,QAAQ,EAAE,sBAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;oBAG/D,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,eAAe,EAAE,CAAC,UAAU;wBACrC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;wBAC7B,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;wBACxB,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC;oBACzD,CAAC,CAAC,CAAC;gBACP,CAAC;gBAEM,KAAK;oBACZ,8CAA8C;oBAC9C,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;gBACnB,CAAC;gBAEM,aAAa;oBAClB,oCAAoC;oBACpC,mEAAmE;oBACnE,MAAM,CAAC,8BAAe,EAAE,CAAC;gBAC3B,CAAC;gBAEM,MAAM;oBACX,iCAAiC;oBACjC,YAAY,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;gBACtC,CAAC;aAEF,CAAA;YA5BY,WAAW;gBADvB,iBAAU,EAAE;;eACA,WAAW,CA4BvB;;QACD,CAAC","file":"auth.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { myConfig } from './auth.config';\r\nimport { tokenNotExpired } from 'angular2-jwt';\r\n\r\n//to avoid editor errors\r\ndeclare var Auth0Lock: any;\r\n\r\n@Injectable()\r\nexport class AuthService{\r\n\r\n    private lock=new Auth0Lock(myConfig.clientID, myConfig.domain, {});        \r\n\r\n    constructor(){    \r\n        this.lock.on(\"authenticated\", (authResult)=>{\r\n            console.log(\"Authenticated\");\r\n            console.log(authResult);\r\n            localStorage.setItem('id_token', authResult.idToken);\r\n        });        \r\n    }\r\n\r\n    public login() {\r\n    // Call the show method to display the widget.\r\n    this.lock.show();\r\n  }\r\n\r\n  public authenticated(): boolean {\r\n    // Check if there's an unexpired JWT\r\n    // This searches for an item in localStorage with key == 'id_token'\r\n    return tokenNotExpired();\r\n  }\r\n\r\n  public logout() {\r\n    // Remove token from localStorage\r\n    localStorage.removeItem('id_token');\r\n  }\r\n\r\n}\r\n"]}